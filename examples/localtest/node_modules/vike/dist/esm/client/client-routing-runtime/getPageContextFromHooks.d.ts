export { getPageContextFromHooks_firstRender };
export { getPageContextFromHooks_uponNavigation };
export { getPageContextFromHooks_errorPage };
export { isAlreadyServerSideRouted };
export type { PageContextFromHooks };
import type { PageContextExports, PageFile } from '../../shared/getPageFiles.js';
import type { PageContextUrlComputedPropsInternal } from '../../shared/addUrlComputedProps.js';
import type { PageContextForRoute } from '../../shared/route/index.js';
import type { PageConfigRuntime } from '../../shared/page-configs/PageConfig.js';
import type { PageContextForPassToClientWarning } from '../shared/getPageContextProxyForUser.js';
/** - pageContext set by user hooks
 *  - pageContext set by loadPageFilesClientSide()
 *  - misc:
 *    - pageContext.isHydration
 *    - pageContext._pageId
 *    - pageContext._hasPageContextFromClient
 *    - pageContext._hasPageContextFromServer
 */
type PageContextFromHooks = {
    _pageId: string;
    isHydration: boolean;
    _pageFilesLoaded: PageFile[];
} & PageContextExports & PageContextForPassToClientWarning;
type PageContext = PageContextUrlComputedPropsInternal & PageContextForRoute & {
    _allPageIds: string[];
    _pageFilesAll: PageFile[];
    _pageConfigs: PageConfigRuntime[];
    isBackwardNavigation: boolean | null;
};
declare function getPageContextFromHooks_firstRender(pageContext: {
    urlOriginal: string;
} & PageContext): Promise<PageContextFromHooks>;
declare function getPageContextFromHooks_errorPage(pageContext: {
    urlOriginal: string;
} & PageContext): Promise<PageContextFromHooks>;
declare function getPageContextFromHooks_uponNavigation(pageContext: {
    _pageId: string;
} & PageContext): Promise<PageContextFromHooks>;
declare function isAlreadyServerSideRouted(err: unknown): boolean;
