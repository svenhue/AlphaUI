export { route };
export type { PageContextForRoute };
export type { PageContextFromRoute };
export type { PageRoutes };
export type { RouteMatches };
import type { PageFile } from '../getPageFiles.js';
import { PageContextUrlComputedPropsInternal, PageContextUrlSources } from '../addUrlComputedProps.js';
import type { PageRoutes, RouteType } from './loadPageRoutes.js';
import type { PageConfigRuntime, PageConfigGlobalRuntime } from '../page-configs/PageConfig.js';
import type { Hook } from '../hooks/getHook.js';
type PageContextForRoute = PageContextUrlComputedPropsInternal & {
    _pageFilesAll: PageFile[];
    _pageConfigs: PageConfigRuntime[];
    _allPageIds: string[];
    _pageConfigGlobal: PageConfigGlobalRuntime;
    _pageRoutes: PageRoutes;
    _onBeforeRouteHook: Hook | null;
} & PageContextUrlSources;
type PageContextFromRoute = {
    _pageId: string | null;
    routeParams: Record<string, string>;
    _routingProvidedByOnBeforeRouteHook?: boolean;
    _debugRouteMatches: RouteMatches;
};
type RouteMatch = {
    pageId: string;
    routeString?: string;
    precedence?: number | null;
    routeType: RouteType;
    routeParams: Record<string, string>;
};
type RouteMatches = 'CUSTOM_ROUTING' | RouteMatch[];
declare function route(pageContextForRoute: PageContextForRoute): Promise<PageContextFromRoute>;
