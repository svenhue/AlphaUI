export { getHook };
export { getHookFromPageConfig };
export { getHookFromPageConfigGlobal };
export { assertHook };
export type { Hook };
export type { HookName };
export type { HookLoc };
export type { HookTimeout };
export type { HooksTimeoutProvidedByUser };
export { getHookTimeoutDefault };
import type { PageContextExports } from '../getPageFiles.js';
import type { HookName, HookNamePage, HookNameGlobal } from '../page-configs/Config.js';
import type { PageConfigBuildTime, PageConfigGlobalRuntime, PageConfigRuntime } from '../page-configs/PageConfig.js';
type Hook = HookLoc & {
    hookFn: HookFn;
    hookTimeout: HookTimeout;
};
type HookLoc = {
    hookName: HookName;
    hookFilePath: string;
};
type HookFn = (arg: unknown) => unknown;
type HookTimeout = {
    error: number | false;
    warning: number | false;
};
type HooksTimeoutProvidedByUser = false | Partial<Record<HookName, false | Partial<HookTimeout>>>;
declare function getHook(pageContext: PageContextExports, hookName: HookName): null | Hook;
declare function getHookFromPageConfig(pageConfig: PageConfigRuntime | PageConfigBuildTime, hookName: HookNamePage): null | Hook;
declare function getHookFromPageConfigGlobal(pageConfigGlobal: PageConfigGlobalRuntime, hookName: HookNameGlobal): null | Hook;
declare function assertHook<TPageContext extends PageContextExports, THookName extends PropertyKey & HookName>(pageContext: TPageContext, hookName: THookName): asserts pageContext is TPageContext & {
    exports: Record<THookName, Function | undefined>;
};
declare function getHookTimeoutDefault(hookName: HookName): HookTimeout;
