export { getConfigDefinedAtString };
export { getDefinedAtString };
import { assert } from '../../utils.js';
import pc from '@brillout/picocolors';
import { getExportPath } from '../getExportPath.js';
function getConfigDefinedAtString(sentenceBegin, configName, { definedAt }) {
    const definedAtString = getDefinedAtString(definedAt, configName);
    const definedAtStr = definedAtString === 'internally' ? definedAtString : `at ${definedAtString}`;
    let configNameStr = `${configName}${ /*sentenceBegin === 'Hook' ? '()' :*/''}`;
    const configDefinedAt = `${sentenceBegin} ${pc.cyan(configNameStr)} defined ${definedAtStr}`;
    return configDefinedAt;
}
function getDefinedAtString(definedAt, configName) {
    if ('isComputed' in definedAt) {
        return 'internally';
    }
    let files;
    if ('files' in definedAt) {
        files = definedAt.files;
    }
    else {
        files = [definedAt];
    }
    assert(files.length >= 1);
    const definedAtString = files
        .map((source) => {
        const { filePathToShowToUser, fileExportPathToShowToUser } = source;
        let s = filePathToShowToUser;
        const exportPath = getExportPath(fileExportPathToShowToUser, configName);
        if (exportPath) {
            s = `${s} > ${pc.cyan(exportPath)}`;
        }
        return s;
    })
        .join(' / ');
    return definedAtString;
}
