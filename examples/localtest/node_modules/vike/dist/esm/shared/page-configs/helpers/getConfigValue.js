export { getConfigValue };
import { assert, assertUsage, getValuePrintable } from '../../utils.js';
import pc from '@brillout/picocolors';
import { getConfigDefinedAtString } from './getConfigDefinedAtString.js';
// prettier-ignore
function getConfigValue(pageConfig, configName, type) {
    const configValue = getConfigValueEntry(pageConfig, configName);
    if (configValue === null)
        return null;
    const { value, definedAt } = configValue;
    if (type)
        assertConfigValueType(value, type, configName, definedAt);
    return configValue;
}
function assertConfigValueType(value, type, configName, definedAt) {
    assert(value !== null);
    const typeActual = typeof value;
    if (typeActual === type)
        return;
    const valuePrintable = getValuePrintable(value);
    const problem = valuePrintable !== null
        ? `value ${pc.cyan(valuePrintable)}`
        : `type ${pc.cyan(typeActual)}`;
    const configDefinedAt = getConfigDefinedAtString('Config', configName, {
        definedAt
    });
    const errMsg = `${configDefinedAt} has an invalid ${problem}: it should be a ${pc.cyan(type)} instead`;
    assertUsage(false, errMsg);
}
function getConfigValueEntry(pageConfig, configName) {
    const configValue = pageConfig.configValues[configName];
    if (!configValue)
        return null;
    // Enable users to suppress global config values by setting the local config value to null
    if (configValue.value === null)
        return null;
    return configValue;
}
